Vagrant.configure("2") do |config|
  ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'

  hostname = ENV['VAGRANT_COMPUTER_NAME'] || "Win-V-Studio" # Default value
  script_path = File.join(File.dirname(__FILE__), 'scripts')

  boxes = [
    { name: hostname, ip: "192.168.56.100", box: "gusztavvargadr/visual-studio-2022-community-windows-10", box_version: "2022.2202.2409", os: "windows", hostname: hostname }
  ]

  # change Memory and CPUs as desired
  config.vm.provider "virtualbox" do |v|
    v.memory = 2048
    v.cpus = 2
  end

  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.auto_update = false
  end

  config.vm.boot_timeout = 600
  config.vm.graceful_halt_timeout = 600
  config.winrm.retry_limit = 30
  config.winrm.retry_delay = 10

  boxes.each do |box|
    config.vm.define box[:name] do |target|
      target.vm.provider "virtualbox" do |v|
        v.name = box[:name]

        # Add a new empty optical drive
        v.customize ["storageattach", box[:name],
        "--storagectl", "IDE Controller",  # Change this if using a different controller
        "--port", 1,                       # Port number for the optical drive
        "--device", 0,                     # Device number
        "--medium", "emptydrive"]          # Keep it empty

        # Enable bidirectional clipboard
        v.customize ["modifyvm", :id, "--clipboard", "bidirectional"]

        # Enable bidirectional drag-and-drop
        v.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
      end

      target.vm.box = box[:box]
      target.vm.box_version = box[:box_version] if box[:box_version]
      target.vm.box_download_insecure = true
      target.vm.synced_folder '.', '/scripts', disabled: true
      target.vm.network :private_network, ip: box[:ip]

      if box[:os] == "windows"
        target.vm.guest = :windows
        target.vm.communicator = "winrm"

        # change computer name
        target.vm.provision "shell", inline: <<-SHELL
        if ((Get-ComputerInfo).CsName -ne "#{hostname}") {
          Rename-Computer -NewName "#{hostname}" -Force -Restart
          Write-Host "Restarting Computer"
          Restart-Computer -Force
        }
        SHELL

        target.vm.provision :shell, path: "#{script_path}/Install-WMF3Hotfix.ps1", privileged: false
        target.vm.provision :shell, path: "#{script_path}/ConfigureRemotingForAnsible.ps1", privileged: false
        target.vm.provision :shell, path: "#{script_path}/debloat.ps1", privileged: true
        target.vm.provision :shell, path: "#{script_path}/install.ps1", privileged: true
      else
        target.vm.communicator = "ssh"
      end

      if box[:forwarded_port]
        box[:forwarded_port].each do |forwarded_port|
          target.vm.network :forwarded_port, guest: forwarded_port[:guest], host: forwarded_port[:host], host_ip: "127.0.0.1", id: forwarded_port[:id]
        end
      end
    end
  end
end